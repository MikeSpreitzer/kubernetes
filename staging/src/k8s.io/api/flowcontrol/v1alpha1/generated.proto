/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package k8s.io.api.flowcontrol.v1alpha1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

// FlowDistinguisherMethod specifies the method of a flow distinguisher.
message FlowDistinguisherMethod {
  // `type` is the type of flow distinguisher method
  // The supported types are "ByUser" and "ByNamespace".
  // Required.
  optional string type = 1;
}

// FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with
// similar attributes and is identified by a pair of strings: the name of the FlowSchema and a "flow distinguisher".
message FlowSchema {
  // `metadata` is the standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // `spec` is the specification of the desired behavior of a flow-schema.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
  // +optional
  optional FlowSchemaSpec spec = 2;

  // `status` is the current status of a flow-schema.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
  // +optional
  optional FlowSchemaStatus status = 3;
}

// FlowSchemaCondition describes conditions for a flow-schema.
message FlowSchemaCondition {
  // `type` is the type of the condition.
  // Required.
  optional string type = 1;

  // `status` is the status of the condition.
  // Can be True, False, Unknown.
  // Required.
  optional string status = 2;

  // `lastTransitionTime` is the last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
  optional string reason = 4;

  // `message` is a human-readable message indicating details about last transition.
  optional string message = 5;
}

// FlowSchemaList is a list of FlowSchema objects.
message FlowSchemaList {
  // `metadata` is the standard list metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // `items` is a list of flow-schemas.
  repeated FlowSchema items = 2;
}

// FlowSchemaSpec describes how the flow-schema's specification looks like.
message FlowSchemaSpec {
  // `priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot
  // be resolved, the flow-schema will be ignored and marked as invalid in its status.
  // Required.
  optional PriorityLevelConfigurationReference priorityLevelConfiguration = 1;

  // `matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen
  // FlowSchema is among those with the numerically lowest (which we take to be logically highest)
  // MatchingPrecedence.  Each MatchingPrecedence value must be non-negative.
  // Note that if the precedence is not specified or zero, it will be set to 1000 as default.
  // +optional
  optional int32 matchingPrecedence = 2;

  // `distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema.
  // `nil` specifies that the distinguisher is disabled and thus will always be the empty string.
  // +optional
  optional FlowDistinguisherMethod distinguisherMethod = 3;

  // `rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if
  // at least one member of rules matches the request.
  // There must be at least one rule for this field, or it will be rejected by the api validation.
  // Required.
  repeated PolicyRulesWithSubjects rules = 4;
}

// FlowSchemaStatus represents the current state of a flow-schema.
message FlowSchemaStatus {
  // `conditions` is a list of current states of flow-schema.
  // +optional
  repeated FlowSchemaCondition conditions = 1;
}

// NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the non-resource
// URL they request to act upon. A NonResourcePolicyRule matches a request if and only if both (a) at least one member
// of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.
message NonResourcePolicyRule {
  // `verbs` is a list of matching verbs and may not be empty.
  // "*" represents all verbs.
  // Required.
  repeated string verbs = 1;

  // `nonResourceURLs` is a set of partial urls that a user should have access to.
  // "*" represents all non-resource urls.
  // Required.
  repeated string nonResourceURLs = 6;
}

// PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject
// making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches
// a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member
// of resourceRules or nonResourceRules matches the request.
message PolicyRulesWithSubjects {
  // `subjects` is the list of normal user, serviceaccount, or group that this rule cares about.
  // There must be at least one subject for this field, or it will be rejected by the api validation.
  // Required.
  repeated Subject subjects = 1;

  // `resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the
  // resource they request to act upon.
  // +optional
  repeated ResourcePolicyRule resourceRules = 2;

  // `nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb
  // and the non-resource URL they request to act upon.
  // +optional
  repeated NonResourcePolicyRule nonResourceRules = 3;
}

// PriorityLevelConfiguration represents the configuration of a priority level.
message PriorityLevelConfiguration {
  // `metadata` is the standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  // `spec` is the specification of the desired behavior of a "request-priority".
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
  // +optional
  optional PriorityLevelConfigurationSpec spec = 2;

  // `status` is the current status of a "request-priority".
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
  // +optional
  optional PriorityLevelConfigurationStatus status = 3;
}

// PriorityLevelConfigurationCondition defines the condition of priority level.
message PriorityLevelConfigurationCondition {
  // `type` is the type of the condition.
  // Required.
  optional string type = 1;

  // `status` is the status of the condition.
  // Can be True, False, Unknown.
  // Required.
  optional string status = 2;

  // `lastTransitionTime` is the last time the condition transitioned from one status to another.
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastTransitionTime = 3;

  // `reason` is a unique, one-word, CamelCase reason for the condition's last transition.
  optional string reason = 4;

  // `message` is a human-readable message indicating details about last transition.
  optional string message = 5;
}

// PriorityLevelConfigurationList is a list of PriorityLevelConfiguration objects.
message PriorityLevelConfigurationList {
  // `metadata` is the standard object's metadata.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // `items` is a list of request-priorities.
  repeated PriorityLevelConfiguration items = 2;
}

// PriorityLevelConfigurationReference contains information that points to the "request-priority" being used.
message PriorityLevelConfigurationReference {
  // `name` is the name of resource being referenced
  // Required.
  optional string name = 1;
}

// PriorityLevelConfigurationSpec is specification of a priority level
message PriorityLevelConfigurationSpec {
  // `assuredConcurrencyShares` must be a positive number for a non-exempt priority level. The concurrency limit of an apiserver
  // is divided among the non-exempt priority levels in proportion to their assured concurrency shares. Basically this produces
  // the assured concurrency value (ACV) for each priority level:
  //
  //             ACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )
  //
  // if not specified, it will be rejected by the api validation.
  // Required.
  optional int32 assuredConcurrencyShares = 1;

  // `queues` must be a number of queues that belong to a non-exempt PriorityLevelConfiguration object. The queues exist
  // independently at each apiserver. The value must be positive for a non-exempt priority level and setting it to 1
  // disables shufflesharding and makes the distinguisher method irrelevant.
  // if not specified, it will be defaulted to 64.
  // TODO: sugguest a default or a way of deciding on a value.
  // +optional
  optional int32 queues = 2;

  // `handSize` must be a small positive number for applying shuffle sharding. When a request arrives at an apiserver the
  // request flow identifier’s string pair is hashed and the hash value is used to shuffle the queue indices and deal
  // a hand of the size specified here. If empty, the hand size will the be set to 1.
  // NOTE: To figure out a better value for your cluster, please refer to (#76846)[https://github.com/kubernetes/kubernetes/issues/76846#issuecomment-523700960]
  // if not specified, it will be defaulted to 8.
  // +optional
  optional int32 handSize = 3;

  // `queueLengthLimit` must be a length limit applied to each queue belongs to the priority.  The value must be positive
  // for a non-exempt priority level.
  // if not specified, it will be defaulted to 50.
  // +optional
  optional int32 queueLengthLimit = 4;

  // `exempt` defines whether the priority level is exempted or not.  There should be at most one exempt priority level.
  // Being exempt means that requests of that priority are not subject to concurrency limits (and thus are never queued)
  // and do not detract from the concurrency available for non-exempt requests. The field is default to false and only those system
  // preset priority level can be exempt.
  // if not specified, defaulted to non-exempt i.e. false.
  // +optional
  optional bool exempt = 5;
}

// PriorityLevelConfigurationStatus represents the current state of a "request-priority".
message PriorityLevelConfigurationStatus {
  // `conditions` is the current state of "request-priority".
  repeated PriorityLevelConfigurationCondition conditions = 1;
}

// ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the resource
// that the request seeks to act upon. A ResourcePolicyRule matches a request if and only if: (a) at least one member
// of verbs matches the request, (b) at least one member of apiGroups matches the request, and (c) at least one member
// of resources matches the request.
message ResourcePolicyRule {
  // `verbs` is a list of matching verbs and may not be empty.
  // "*" represents all verbs.
  // Required.
  repeated string verbs = 1;

  // `apiGroups` is a list of matching API groups and may not be empty.
  // "*" represents all api-groups.
  // Required.
  repeated string apiGroups = 2;

  // `resources` is a list of matching resource (i.e., lowercase and plural) with, if desired, subresource. This list
  // may not be empty.
  // "*" represents all resource urls.
  // Required.
  repeated string resources = 3;
}

// Subject matches a set of users.
// Syntactically, Subject is a general API object reference.
// Authorization produces a username and a set of groups, and we imagine special kinds of non-namespaced objects,
// User and Group to represent such a username or group.
// The only kind of true object reference that currently will match any users is ServiceAccount.
message Subject {
  // `kind` of object being referenced. Values defined by this API group are "User", "Group", and "ServiceAccount".
  // If the kind value is not recognized, the flow-control layer in api-server should report an error.
  // Required.
  optional string kind = 1;

  // `name` of the object being referenced.  To match regardless of name, use '*'.
  // Required.
  optional string name = 2;

  // `namespace` of the referenced object.  If the object kind is non-namespace, such as "User" or "Group", and this value is not empty
  // the Authorizer should report an error.
  // +optional
  optional string namespace = 3;
}

